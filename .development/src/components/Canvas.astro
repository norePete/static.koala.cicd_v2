---
const { image, width, height, messagePipe } = Astro.props;
import { suid } from '../libs/utils';
const uid = suid()
const uidCanvas = suid()
---
<div id="uuidCanvasParent" 
    data-uid={uid}
    data-image_src={image} 
    data-image_width={width} 
    data-image_height={height} 
    class="m-1 bg-white rounded-lg justify-center items-center flex grow flex-col relative">
    <canvas id="uuidCanvas" data-uid={uidCanvas} width={width} height={height} class="absolute top-0 left-0 bg-transparent w-full h-full -z-1">
    </canvas>




    <!--<div class="bg-[url('../images/cyberpunk.jpg')] bg-cover opacity-30 w-full h-full flex flex-col -z-1 absolute top-0 left-0"></div>-->
    <div class="overflow-hidden opacity-90 w-full h-full flex flex-col -z-1 absolute top-0 left-0">
        <img src="/images/abstract.webp" class="h-full w-full object-left-top md:object-center object-cover">
    </div>
    <div class="bg-transparent w-full h-full flex flex-col -z-2 absolute top-0 left-0">
        <slot />
    </div>
</div>

<script define:vars={{uid, uidCanvas, messagePipe}}>
	const node = document.querySelector(`#uuidCanvasParent[data-uid="${uid}"]`);
    const canvas = document.querySelector(`#uuidCanvas[data-uid="${uidCanvas}"]`);

    const image_width = node.dataset.image_width;
    const image_height = node.dataset.image_height;
    const image_src = node.dataset.image_src;
    const scriptElement = document.getElementById("worker");

    const workerCode = scriptElement.src;
    const worker = new Worker(workerCode);

    const canvasWorker = canvas.transferControlToOffscreen();
    worker.postMessage({ label: "init", messagePipe: messagePipe, canvas: canvasWorker, imageUrl: image_src }, [canvasWorker]);

    document.addEventListener('mousemove', (event) => { 
        if (event.pageX >= canvas.getBoundingClientRect().left &&
            event.pageX <= canvas.getBoundingClientRect().right &&
            event.pageY >= canvas.getBoundingClientRect().top &&
            event.pageY <= canvas.getBoundingClientRect().bottom) {
            const msg = { 
                label: "mouseCoord", 
                x:event.pageX, 
                y:event.pageY, 
                width: canvas.getBoundingClientRect().width,
                height: canvas.getBoundingClientRect().height,
                image_width: image_width,
                image_height: image_height,
                message_pipe: messagePipe,
            };
            worker.postMessage(msg);
        }
    });
</script>





